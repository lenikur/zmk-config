/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LWR RSE>;
            then-layer = <ADJ>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB      |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL(ESC) |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                         | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&lt 1 TAB      &kp Q  &kp W  &kp E         &kp R     &kp T          &kp Y        &kp U          &kp I      &kp O    &kp P     &kp LEFT_BRACKET
&mt LCTRL ESC  &kp A  &kp S  &kp D         &kp F     &kp G          &kp H        &kp J          &kp K      &kp L    &kp SEMI  &mt RCTRL SQT
&kp LSHFT      &kp Z  &kp X  &kp C         &kp V     &kp B          &kp N        &kp M          &kp COMMA  &kp DOT  &kp FSLH  &mt RIGHT_SHIFT MINUS
                             &kp LEFT_ALT  &kp LGUI  &lt 2 SPACE    &lt 1 ENTER  &kp BACKSPACE  &lt 2 DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // |  F1  | F2  | F2  | F3  | F4  | F5  |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3        &kp N4  &kp N5    &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &kp MINUS
&kp LCTRL  &trans  &trans  &trans        &trans  &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &kp PLUS
&kp LSHFT  &trans  &trans  &trans        &trans  &trans    &trans    &trans    &trans  &trans     &trans  &trans
                           &kp LEFT_ALT  &trans  &trans    &trans    &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp RIGHT_BRACKET
&kp LCTRL  &kp F1    &kp F2  &kp F3    &kp F4    &kp F5       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &kp F6    &kp F7  &kp F8    &kp F9    &kp F10      &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans          &trans             &trans           &trans      &trans  &out OUT_BLE
&trans      &trans        &trans        &trans        &trans        &trans          &kt C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &trans  &out OUT_USB
&trans      &trans        &trans        &trans        &trans        &trans          &mkp LCLK       &mkp RCLK          &kp K_SLEEP      &trans      &trans  &out OUT_TOG
                                        &trans        &trans        &trans          &trans          &kp C_PLAY_PAUSE   &trans
            >;
        };
    };
};
